devtools::document()
devtools::document()
?saveRDS
data("points_army", package = "pkgrpEArmyDataConv")
devtools::document()
library(pkgrpEArmyDataConv)
library(pkgrpEArmyDataConv)
Convert(2, 5, 30, 50, 300)
devtools::document()
library(pkgrpEArmyDataConv)
Convert(jumping = 2, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
devtools::document()
library(pkgrpEArmyDataConv)
Convert(jumping = 2, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
devtools::document()
library(pkgrpEArmyDataConv)
Convert(jumping = 2, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
devtools::document()
library(pkgrpEArmyDataConv)
devtools::document()
library(pkgrpEArmyDataConv)
devtools::document()
library(pkgrpEArmyDataConv)
points_army <- load("data/points_army.rda")
load("data/points_army.rda")
load("data/points_army.rda")
View(df)
?load
load("data/points_army.rda")
load("data/Performance_sportive_et_nb_points.rda")
load("data/points_army.rda")
load("data/Performance_sportive_et_nb_points.rda")
devtools::document()
library(pkgrpEArmyDataConv)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(pkgrpEArmyDataConv)
devtools::document()
library(pkgrpEArmyDataConv)
devtools::document()
library(pkgrpEArmyDataConv)
devtools::document()
library(pkgrpEArmyDataConv)
usethis::use_mit_license()
devtools::document()
library(pkgrpEArmyDataConv)
View(Performances)
View(points_army)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(pkgrpEArmyDataConv)
devtools::document()
library(pkgrpEArmyDataConv)
devtools::document()
library(pkgrpEArmy)
usethis::use_testthat()
usethis::use_test("test_army")
Convert(jumping = 2, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(jumping = -2, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
devtools::test()
usethis::use_test("Orientation")
Orientation(list(5, 10, 20, 19, 25))
Orientation(list(5, 10, 20, 19, 35))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
Convert(ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(9, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(jumping = 9, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(jumping = 100, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(jumping = 1, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(jumping = 3, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(jumping = 9, ball_toss = 5, equilibrium = 30, planking = 50, running = 100)
Convert(jumping = 9, ball_toss = 5, equilibrium = 30, planking = 50, running = 9000)
Convert(jumping = 2, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(jumping = 3, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
Convert(jumping = 2.2, ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
test_that("Convert misses one argument 'jumping' and return a warning", {
expect_error( Convert(ball_tass = 5, equilibrium = 30, planking = 50, running = 300)) #the numerical variable has to be positive
})
Convert(ball_tass = 5, equilibrium = 30, planking = 50, running = 300)
?expect_warning
Convert(,boll_tass = 5, equilibrium = 30, planking = 50, running = 300)
Convert(ball_tass = <5, equilibrium = 30, planking = 50, running = 300
Convert(boll_tass < 5, equilibrium = 30, planking = 50, running = 300)
Convert(ball_tass < 5, equilibrium = 30, planking = 50, running = 300)
Convert(boll_toss < 5, equilibrium = 30, planking = 50, running = 300)
Convert(ball_tass < 5, equilibrium = 30, planking = 50, running = 300)
Convert(ball_toss < 5, equilibrium = 30, planking = 50, running = 300)
Convert(ball_toss = 5, equilibrium = 30, planking = 50, running = 300)
usethis::use_test("points_army")
test_that("multiplication works", {
expect_equal(points_army, points_army)
})
points_army
test_that("Calling points_army(9) will return a message of error", {
expect_failure(points_army(9))
})
points_army(9)
test_that("Calling points_army(9) will return a message of error", {
expect_error(points_army(9))
})
test_that("Calling points_army will return the homonymus data-set", {
expect_equal(points_army, points_army)
})
test_that("Calling points_army(9) will return a message of error", {
expect_error(points_army(9))
})
usethis::use_test("Performances")
usethis::use_test("militaryapp")
test_that("Running militaryapp() will run with no error the shiny app", {
expect_no_error(militaryapp())
})
test_that("Running militaryapp() won't call another autogenerated dataset like mtcars", {
expect_equal(militaryapp(), militaryapp())
})
test_that("Running militaryapp() won't call another autogenerated dataset like mtcars", {
expect_condition(militaryapp(1))
})
devtools::test()
test_that("Running militaryapp() will run with no error the shiny app", {
expect_no_error(militaryapp())
})
library(pkgrpEArmy)
library(pkgrpEArmyDataConv)
militaryapp()
